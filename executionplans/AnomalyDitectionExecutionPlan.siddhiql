/* Enter a unique ExecutionPlan */
@Plan:name('AnomalyDitectionExecutionPlan')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */

/* define streams/tables and write queries here ... */



@Import('outlier.test.stream:1.0.0')
define stream inputFlightDelayedStream (flight_number int, flight_delayed_time_min long, flight_timestamp string);

@Export('delayed.outlier.event.stream:1.0.0')
define stream outlierAnomalyAlert (flight_number int, flight_delayed_time_min long, flight_timestamp int, stderr double, beta0 double, beta1 double, outlier bool);

from inputFlightDelayedStream
select
	flight_number,
	flight_delayed_time_min,
	(convert(time:dateFormat(flight_timestamp, 'HH', 'HH:mm'), 'int')*60 + convert(time:dateFormat(flight_timestamp, 'mm', 'HH:mm'), 'int')) as flight_timestamp
insert into inputFlightDelayedStreamInterm;


from inputFlightDelayedStreamInterm#timeseries:outlier(3, flight_delayed_time_min, flight_timestamp)
select 
	flight_number,
	flight_delayed_time_min,
	flight_timestamp,
	stderr,
	beta0,
	beta1,
	outlier
insert into OutlierAlertInterm;

from OutlierAlertInterm[stderr > 0 and outlier]
select *
insert into outlierAnomalyAlert;

from OutlierAlertInterm[(stderr == 0 and outlier) or (not outlier)]
select *
insert into anomalyFilteredFlightStream;